{"version":3,"sources":["../../../src/web.ts"],"names":["StorageWeb","group","a","this","options","value","impl","getItem","applyPrefix","key","setItem","removeItem","keys","rawKeys","map","k","substring","prefix","length","migrated","existing","oldprefix","Object","filter","indexOf","oldkey","get","push","set","window","localStorage"],"mappings":"iPAaaA,EAAb,iG,2BACUC,MAAQ,mBADlB,sFAGS,6BAAAC,EAAA,sDACgB,kBADED,EAAlB,EAAkBA,SAErBE,KAAKF,MAAQA,GAFV,gDAHT,+GASS,WAAUG,GAAV,eAAAF,EAAA,6DACCG,EAAQF,KAAKG,KAAKC,QAAQJ,KAAKK,YAAYJ,EAAQK,MADpD,kBAGE,CAAEJ,UAHJ,gDATT,+GAeS,WAAUD,GAAV,SAAAF,EAAA,sDACLC,KAAKG,KAAKI,QAAQP,KAAKK,YAAYJ,EAAQK,KAAML,EAAQC,OADpD,gDAfT,kHAmBS,WAAaD,GAAb,SAAAF,EAAA,sDACLC,KAAKG,KAAKK,WAAWR,KAAKK,YAAYJ,EAAQK,MADzC,gDAnBT,gHAuBS,mCAAAP,EAAA,6DACCU,EAAOT,KAAKU,UAAUC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,UAAU,EAAKC,OAAOC,WADxD,kBAGE,CAAEN,SAHJ,gDAvBT,gHA6BS,gCAAAV,EAAA,oEACaC,KAAKU,WADlB,IACL,2BAAWJ,EAAuB,QAChCN,KAAKG,KAAKK,WAAWF,GAFlB,8EA7BT,kHAmCS,gDAAAP,EAAA,sDACCiB,EAAqB,GACrBC,EAAqB,GACrBC,EAAY,QACZT,EAAOU,OAAOV,KAAKT,KAAKG,MAAMiB,QAAO,SAAAR,GAAC,OAA6B,IAAzBA,EAAES,QAAQH,MAJrD,cAMgBT,GANhB,gEAMMa,EANN,QAOGhB,EAAMgB,EAAOT,UAAUK,EAAUH,QACjCb,EAAiC,QAA5B,EAAGF,KAAKG,KAAKC,QAAQkB,UAAO,QAAI,GARxC,UASmCtB,KAAKuB,IAAI,CAAEjB,QAT9C,oBAWyB,kBAXzB,EASKJ,MATL,iBAYDe,EAASO,KAAKlB,GAZb,yCAcKN,KAAKyB,IAAI,CAAEnB,MAAKJ,UAdrB,QAeDc,EAASQ,KAAKlB,GAfb,wKAmBE,CAAEU,WAAUC,aAnBd,gEAnCT,oHAyDS,kCAAAlB,EAAA,sDACa,QACZU,EAAOU,OAAOV,KAAKT,KAAKG,MAAMiB,QAAO,SAAAR,GAAC,OAA6B,IAAzBA,EAAES,QADhC,YADb,cAGgBZ,GAHhB,IAGL,2BAAWa,EAAgB,QACzBtB,KAAKG,KAAKK,WAAWc,GAJlB,8EAzDT,sEAiEE,WACE,OAAOI,OAAOC,eAlElB,kBAqEE,WACE,MAAsB,kBAAf3B,KAAKF,MAA4B,GAAjC,UAAyCE,KAAKF,MAA9C,OAtEX,qBAyEU,WAAO,WACb,OAAOqB,OAAOV,KAAKT,KAAKG,MAAMiB,QAAO,SAAAR,GAAC,OAA+B,IAA3BA,EAAES,QAAQ,EAAKP,aA1E7D,yBA6EU,SAAYR,GAClB,OAAON,KAAKc,OAASR,MA9EzB,G,MAAgC","file":"static/js/48.3fdd024b.chunk.js","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  StoragePlugin,\n  ConfigureOptions,\n  GetOptions,\n  GetResult,\n  SetOptions,\n  RemoveOptions,\n  KeysResult,\n  MigrateResult,\n} from './definitions';\n\nexport class StorageWeb extends WebPlugin implements StoragePlugin {\n  private group = 'CapacitorStorage';\n\n  public async configure({ group }: ConfigureOptions): Promise<void> {\n    if (typeof group === 'string') {\n      this.group = group;\n    }\n  }\n\n  public async get(options: GetOptions): Promise<GetResult> {\n    const value = this.impl.getItem(this.applyPrefix(options.key));\n\n    return { value };\n  }\n\n  public async set(options: SetOptions): Promise<void> {\n    this.impl.setItem(this.applyPrefix(options.key), options.value);\n  }\n\n  public async remove(options: RemoveOptions): Promise<void> {\n    this.impl.removeItem(this.applyPrefix(options.key));\n  }\n\n  public async keys(): Promise<KeysResult> {\n    const keys = this.rawKeys().map(k => k.substring(this.prefix.length));\n\n    return { keys };\n  }\n\n  public async clear(): Promise<void> {\n    for (const key of this.rawKeys()) {\n      this.impl.removeItem(key);\n    }\n  }\n\n  public async migrate(): Promise<MigrateResult> {\n    const migrated: string[] = [];\n    const existing: string[] = [];\n    const oldprefix = '_cap_';\n    const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n\n    for (const oldkey of keys) {\n      const key = oldkey.substring(oldprefix.length);\n      const value = this.impl.getItem(oldkey) ?? '';\n      const { value: currentValue } = await this.get({ key });\n\n      if (typeof currentValue === 'string') {\n        existing.push(key);\n      } else {\n        await this.set({ key, value });\n        migrated.push(key);\n      }\n    }\n\n    return { migrated, existing };\n  }\n\n  public async removeOld(): Promise<void> {\n    const oldprefix = '_cap_';\n    const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n    for (const oldkey of keys) {\n      this.impl.removeItem(oldkey);\n    }\n  }\n\n  private get impl(): Storage {\n    return window.localStorage;\n  }\n\n  private get prefix(): string {\n    return this.group === 'NativeStorage' ? '' : `${this.group}.`;\n  }\n\n  private rawKeys(): string[] {\n    return Object.keys(this.impl).filter(k => k.indexOf(this.prefix) === 0);\n  }\n\n  private applyPrefix(key: string) {\n    return this.prefix + key;\n  }\n}\n"],"sourceRoot":""}