{"version":3,"sources":["../../../src/web.ts"],"names":["ScreenReaderWeb","a","this","unavailable","options","window","utterance","SpeechSynthesisUtterance","value","language","lang","speechSynthesis","speak"],"mappings":"6OAIaA,EAAb,sMACE,sBAAAC,EAAA,4DACQC,KAAKC,YAAY,iDADzB,gDADF,gHAKE,WAAYC,GAAZ,eAAAH,EAAA,yDACQ,oBAAqBI,OAD7B,sBAEUH,KAAKC,YACT,oDAHN,OAOQG,EAAY,IAAIC,yBAAyBH,EAAQI,OAEnDJ,EAAQK,WACVH,EAAUI,KAAON,EAAQK,UAG3BE,gBAAgBC,MAAMN,GAbxB,gDALF,4D,MAAqC","file":"static/js/46.3bb0cb3f.chunk.js","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type { ScreenReaderPlugin, SpeakOptions } from './definitions';\n\nexport class ScreenReaderWeb extends WebPlugin implements ScreenReaderPlugin {\n  async isEnabled(): Promise<never> {\n    throw this.unavailable('This feature is not available in the browser.');\n  }\n\n  async speak(options: SpeakOptions): Promise<void> {\n    if (!('speechSynthesis' in window)) {\n      throw this.unavailable(\n        'Browser does not support the SpeechSynthesis API',\n      );\n    }\n\n    const utterance = new SpeechSynthesisUtterance(options.value);\n\n    if (options.language) {\n      utterance.lang = options.language;\n    }\n\n    speechSynthesis.speak(utterance);\n  }\n}\n"],"sourceRoot":""}